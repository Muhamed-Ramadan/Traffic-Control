
Testing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  0000019e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000087f  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073a  00000000  00000000  00000b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000434  00000000  00000000  00001285  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  000016bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000441  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ba  00000000  00000000  00001c69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00001e23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_1>
   8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_1>:
	INT_init(INT_0 , rising_edge);
	DDRA|=1;
}

ISR(INT0_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
		PORTA^=1;
  8a:	9b b3       	in	r25, 0x1b	; 27
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	89 27       	eor	r24, r25
  90:	8b bb       	out	0x1b, r24	; 27
}
  92:	9f 91       	pop	r25
  94:	8f 91       	pop	r24
  96:	0f 90       	pop	r0
  98:	0f be       	out	0x3f, r0	; 63
  9a:	0f 90       	pop	r0
  9c:	1f 90       	pop	r1
  9e:	18 95       	reti

000000a0 <ISR_init>:
#include "APP_I.h"


void ISR_init()
{
	GICR|=(1<<7);
  a0:	8b b7       	in	r24, 0x3b	; 59
  a2:	80 68       	ori	r24, 0x80	; 128
  a4:	8b bf       	out	0x3b, r24	; 59
	MCUCR|=(2<<2);
  a6:	85 b7       	in	r24, 0x35	; 53
  a8:	88 60       	ori	r24, 0x08	; 8
  aa:	85 bf       	out	0x35, r24	; 53
	DDRA|=1;
  ac:	d0 9a       	sbi	0x1a, 0	; 26
	sei();
  ae:	78 94       	sei
  b0:	08 95       	ret

000000b2 <__vector_2>:
}

ISR(INT1_vect_)
{
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
	PORTA^=1;
  c0:	9b b3       	in	r25, 0x1b	; 27
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	89 27       	eor	r24, r25
  c6:	8b bb       	out	0x1b, r24	; 27
}
  c8:	9f 91       	pop	r25
  ca:	8f 91       	pop	r24
  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <main>:
*/

//ISR_Interrupt
int main(void)
{
	ISR_init();
  d6:	0e 94 50 00 	call	0xa0	; 0xa0 <ISR_init>
  da:	ff cf       	rjmp	.-2      	; 0xda <main+0x4>

000000dc <__vector_11>:

volatile static  u32 overflow=0;


ISR(TIMER0_OVF_vect)
{
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
  ea:	af 93       	push	r26
  ec:	bf 93       	push	r27
	overflow++;	
  ee:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  f2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  f6:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <_edata+0x2>
  fa:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <_edata+0x3>
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	a1 1d       	adc	r26, r1
 102:	b1 1d       	adc	r27, r1
 104:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 108:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 10c:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <_edata+0x2>
 110:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <_edata+0x3>
}
 114:	bf 91       	pop	r27
 116:	af 91       	pop	r26
 118:	9f 91       	pop	r25
 11a:	8f 91       	pop	r24
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
