
Atmega32 drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000558  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000558  000005ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800064  00800064  000005f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000620  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bb0  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bc  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005eb  00000000  00000000  00001a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  0000207c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ae  00000000  00000000  00002228  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000033e  00000000  00000000  000026d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00002a14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <main>
  8a:	0c 94 aa 02 	jmp	0x554	; 0x554 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
, when push button is pressed (pedestrian_mode_flag = 1) ON_Period is modified to zero 
so the lights are ignored and the normal mode is finished without lights or delay time  */


ISR(INT0_vect) // the interrupt is generated at the rising edge so long press has no effect
{ 
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
	if(pedestrian_mode_flag==0 ) 
  b4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
  b8:	81 11       	cpse	r24, r1
  ba:	0d c0       	rjmp	.+26     	; 0xd6 <__vector_1+0x44>
	{
		pedestrian_mode_flag=1; // the second press (double press) has no effect as the flag is not 0;
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
		ON_Period=0;
  c2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <ON_Period>
  c6:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <ON_Period+0x1>
  ca:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <ON_Period+0x2>
  ce:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <ON_Period+0x3>
		Force_Stop_Timer0(); 
  d2:	0e 94 2b 02 	call	0x456	; 0x456 <Force_Stop_Timer0>
		/* Force Stopping Timer0 while the timer_delay_us() function in progress 
		 (which is waiting the rest of 5 sec to finish) */
	}
}
  d6:	ff 91       	pop	r31
  d8:	ef 91       	pop	r30
  da:	bf 91       	pop	r27
  dc:	af 91       	pop	r26
  de:	9f 91       	pop	r25
  e0:	8f 91       	pop	r24
  e2:	7f 91       	pop	r23
  e4:	6f 91       	pop	r22
  e6:	5f 91       	pop	r21
  e8:	4f 91       	pop	r20
  ea:	3f 91       	pop	r19
  ec:	2f 91       	pop	r18
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <Pedestrian_Mode>:

void Pedestrian_Mode()
{
  f8:	cf 93       	push	r28
	//C. Yellow of Pedestrian and Yellow of Vehicles blink for 5 sec
	//D. Red    of Pedestrian and Green  of Vehicles are on For 5 sec
	
	
	// step A is not active if the normal mode is red (Vehicles are already stopped) (state =RED=3)
	if (state==Yellow_BEFORE_GREEN || state==GREEN || state==Yellow_AFTER_GREEN)  
  fa:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <state>
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	48 f5       	brcc	.+82     	; 0x154 <Pedestrian_Mode+0x5c>
	{
		SETBit(PD_PORT,PD_RED_PIN );// Red of Pedestrians will be on for 5 sec
 102:	8b b3       	in	r24, 0x1b	; 27
 104:	81 60       	ori	r24, 0x01	; 1
 106:	8b bb       	out	0x1b, r24	; 27
		SETBit(CR_PORT,CR_GREEN_PIN );// Green of Vehicles will be on for 5 sec
 108:	88 b3       	in	r24, 0x18	; 24
 10a:	84 60       	ori	r24, 0x04	; 4
 10c:	88 bb       	out	0x18, r24	; 24
		
		//Yellow of Pedestrian and Yellow of Vehicles Will blink for 5 sec
		//Red of Pedestrian and Green of Vehicles are on for 5 sec
		for (u8 i=0;i<4;i++)
 10e:	c0 e0       	ldi	r28, 0x00	; 0
 110:	19 c0       	rjmp	.+50     	; 0x144 <Pedestrian_Mode+0x4c>
		{
		SETBit(CR_PORT,CR_YELLOW_PIN );
 112:	88 b3       	in	r24, 0x18	; 24
 114:	82 60       	ori	r24, 0x02	; 2
 116:	88 bb       	out	0x18, r24	; 24
		SETBit(PD_PORT,PD_YELLOW_PIN );
 118:	8b b3       	in	r24, 0x1b	; 27
 11a:	82 60       	ori	r24, 0x02	; 2
 11c:	8b bb       	out	0x1b, r24	; 27
		timer_delay_us(DELAY_TIME/8);
 11e:	68 e6       	ldi	r22, 0x68	; 104
 120:	79 e8       	ldi	r23, 0x89	; 137
 122:	89 e0       	ldi	r24, 0x09	; 9
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 7d 02 	call	0x4fa	; 0x4fa <timer_delay_us>
		CLRBit(CR_PORT,CR_YELLOW_PIN );
 12a:	88 b3       	in	r24, 0x18	; 24
 12c:	8d 7f       	andi	r24, 0xFD	; 253
 12e:	88 bb       	out	0x18, r24	; 24
		CLRBit(PD_PORT,PD_YELLOW_PIN );
 130:	8b b3       	in	r24, 0x1b	; 27
 132:	8d 7f       	andi	r24, 0xFD	; 253
 134:	8b bb       	out	0x1b, r24	; 27
		timer_delay_us(DELAY_TIME/8);
 136:	68 e6       	ldi	r22, 0x68	; 104
 138:	79 e8       	ldi	r23, 0x89	; 137
 13a:	89 e0       	ldi	r24, 0x09	; 9
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <timer_delay_us>
		SETBit(PD_PORT,PD_RED_PIN );// Red of Pedestrians will be on for 5 sec
		SETBit(CR_PORT,CR_GREEN_PIN );// Green of Vehicles will be on for 5 sec
		
		//Yellow of Pedestrian and Yellow of Vehicles Will blink for 5 sec
		//Red of Pedestrian and Green of Vehicles are on for 5 sec
		for (u8 i=0;i<4;i++)
 142:	cf 5f       	subi	r28, 0xFF	; 255
 144:	c4 30       	cpi	r28, 0x04	; 4
 146:	28 f3       	brcs	.-54     	; 0x112 <Pedestrian_Mode+0x1a>
		CLRBit(CR_PORT,CR_YELLOW_PIN );
		CLRBit(PD_PORT,PD_YELLOW_PIN );
		timer_delay_us(DELAY_TIME/8);
		}
		
		CLRBit(PD_PORT,PD_RED_PIN );
 148:	8b b3       	in	r24, 0x1b	; 27
 14a:	8e 7f       	andi	r24, 0xFE	; 254
 14c:	8b bb       	out	0x1b, r24	; 27
		CLRBit(CR_PORT,CR_GREEN_PIN );
 14e:	88 b3       	in	r24, 0x18	; 24
 150:	8b 7f       	andi	r24, 0xFB	; 251
 152:	88 bb       	out	0x18, r24	; 24
	}
	// B. C. D.
	
	//B. Green of Ped. , Red of Veh. for 5 sec
	SETBit(PD_PORT,PD_GREEN_PIN );
 154:	8b b3       	in	r24, 0x1b	; 27
 156:	84 60       	ori	r24, 0x04	; 4
 158:	8b bb       	out	0x1b, r24	; 27
	SETBit(CR_PORT,CR_RED_PIN );
 15a:	88 b3       	in	r24, 0x18	; 24
 15c:	81 60       	ori	r24, 0x01	; 1
 15e:	88 bb       	out	0x18, r24	; 24
	timer_delay_us(DELAY_TIME);
 160:	60 e4       	ldi	r22, 0x40	; 64
 162:	7b e4       	ldi	r23, 0x4B	; 75
 164:	8c e4       	ldi	r24, 0x4C	; 76
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 7d 02 	call	0x4fa	; 0x4fa <timer_delay_us>
	
	
	//C. Yellow of Ped , Yellow of Veh for 5 sec
    //   Green of Ped. , Red of Veh. for 5 sec
	
	for (u8 i=0;i<4;i++)
 16c:	c0 e0       	ldi	r28, 0x00	; 0
 16e:	19 c0       	rjmp	.+50     	; 0x1a2 <Pedestrian_Mode+0xaa>
	{
		SETBit(CR_PORT,CR_YELLOW_PIN );
 170:	88 b3       	in	r24, 0x18	; 24
 172:	82 60       	ori	r24, 0x02	; 2
 174:	88 bb       	out	0x18, r24	; 24
		SETBit(PD_PORT,PD_YELLOW_PIN );
 176:	8b b3       	in	r24, 0x1b	; 27
 178:	82 60       	ori	r24, 0x02	; 2
 17a:	8b bb       	out	0x1b, r24	; 27
		timer_delay_us(DELAY_TIME/8);
 17c:	68 e6       	ldi	r22, 0x68	; 104
 17e:	79 e8       	ldi	r23, 0x89	; 137
 180:	89 e0       	ldi	r24, 0x09	; 9
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 7d 02 	call	0x4fa	; 0x4fa <timer_delay_us>
		CLRBit(CR_PORT,CR_YELLOW_PIN );
 188:	88 b3       	in	r24, 0x18	; 24
 18a:	8d 7f       	andi	r24, 0xFD	; 253
 18c:	88 bb       	out	0x18, r24	; 24
		CLRBit(PD_PORT,PD_YELLOW_PIN );
 18e:	8b b3       	in	r24, 0x1b	; 27
 190:	8d 7f       	andi	r24, 0xFD	; 253
 192:	8b bb       	out	0x1b, r24	; 27
		timer_delay_us(DELAY_TIME/8);
 194:	68 e6       	ldi	r22, 0x68	; 104
 196:	79 e8       	ldi	r23, 0x89	; 137
 198:	89 e0       	ldi	r24, 0x09	; 9
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <timer_delay_us>
	
	
	//C. Yellow of Ped , Yellow of Veh for 5 sec
    //   Green of Ped. , Red of Veh. for 5 sec
	
	for (u8 i=0;i<4;i++)
 1a0:	cf 5f       	subi	r28, 0xFF	; 255
 1a2:	c4 30       	cpi	r28, 0x04	; 4
 1a4:	28 f3       	brcs	.-54     	; 0x170 <Pedestrian_Mode+0x78>
		timer_delay_us(DELAY_TIME/8);
		CLRBit(CR_PORT,CR_YELLOW_PIN );
		CLRBit(PD_PORT,PD_YELLOW_PIN );
		timer_delay_us(DELAY_TIME/8);
	}
	CLRBit(PD_PORT,PD_GREEN_PIN );
 1a6:	8b b3       	in	r24, 0x1b	; 27
 1a8:	8b 7f       	andi	r24, 0xFB	; 251
 1aa:	8b bb       	out	0x1b, r24	; 27
	CLRBit(CR_PORT,CR_RED_PIN );
 1ac:	88 b3       	in	r24, 0x18	; 24
 1ae:	8e 7f       	andi	r24, 0xFE	; 254
 1b0:	88 bb       	out	0x18, r24	; 24
	
	//D. Red of Ped. , Green of Veh.  for 5 sec
	SETBit(PD_PORT,PD_RED_PIN );
 1b2:	8b b3       	in	r24, 0x1b	; 27
 1b4:	81 60       	ori	r24, 0x01	; 1
 1b6:	8b bb       	out	0x1b, r24	; 27
	SETBit(CR_PORT,CR_GREEN_PIN );
 1b8:	88 b3       	in	r24, 0x18	; 24
 1ba:	84 60       	ori	r24, 0x04	; 4
 1bc:	88 bb       	out	0x18, r24	; 24
	timer_delay_us(DELAY_TIME);
 1be:	60 e4       	ldi	r22, 0x40	; 64
 1c0:	7b e4       	ldi	r23, 0x4B	; 75
 1c2:	8c e4       	ldi	r24, 0x4C	; 76
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <timer_delay_us>
	CLRBit(PD_PORT,PD_RED_PIN );
 1ca:	8b b3       	in	r24, 0x1b	; 27
 1cc:	8e 7f       	andi	r24, 0xFE	; 254
 1ce:	8b bb       	out	0x1b, r24	; 27
	CLRBit(CR_PORT,CR_GREEN_PIN );
 1d0:	88 b3       	in	r24, 0x18	; 24
 1d2:	8b 7f       	andi	r24, 0xFB	; 251
 1d4:	88 bb       	out	0x18, r24	; 24
	
	state = Yellow_AFTER_GREEN;             // normal mode will start again from yellow before red(after geen)
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <state>
	pedestrian_mode_flag=0;    // now pedestrian mode is finished
 1dc:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
}
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <APP_Start>:

void APP_Start(void)
{
	Timer0_Init(NORMAL);
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	0e 94 4b 02 	call	0x496	; 0x496 <Timer0_Init>
	SETBit(PD_DDR,PD_GREEN_PIN );   //DDR Pin of  Pedestrian's Green LED as output
 1ea:	8a b3       	in	r24, 0x1a	; 26
 1ec:	84 60       	ori	r24, 0x04	; 4
 1ee:	8a bb       	out	0x1a, r24	; 26
	SETBit(PD_DDR,PD_YELLOW_PIN );  //DDR Pin of  Pedestrian's YELLOW LED as output
 1f0:	8a b3       	in	r24, 0x1a	; 26
 1f2:	82 60       	ori	r24, 0x02	; 2
 1f4:	8a bb       	out	0x1a, r24	; 26
	SETBit(PD_DDR,PD_RED_PIN );     //DDR Pin of  Pedestrian's RED LED as output
 1f6:	8a b3       	in	r24, 0x1a	; 26
 1f8:	81 60       	ori	r24, 0x01	; 1
 1fa:	8a bb       	out	0x1a, r24	; 26
	SETBit(CR_DDR,CR_GREEN_PIN );   //DDR Pin of  Vehicle's    Green LED as output
 1fc:	87 b3       	in	r24, 0x17	; 23
 1fe:	84 60       	ori	r24, 0x04	; 4
 200:	87 bb       	out	0x17, r24	; 23
	SETBit(CR_DDR,CR_YELLOW_PIN );	//DDR Pin of  Vehicle's    YELLOW LED as output
 202:	87 b3       	in	r24, 0x17	; 23
 204:	82 60       	ori	r24, 0x02	; 2
 206:	87 bb       	out	0x17, r24	; 23
	SETBit(CR_DDR,CR_RED_PIN );		//DDR Pin of  Vehicle's    RED LED as output
 208:	87 b3       	in	r24, 0x17	; 23
 20a:	81 60       	ori	r24, 0x01	; 1
 20c:	87 bb       	out	0x17, r24	; 23
	INT_init(INT_0, rising_edge); // enables INT0 and Selects External Interrupt Sense Mode (Rising Edge)
 20e:	62 e0       	ldi	r22, 0x02	; 2
 210:	86 e0       	ldi	r24, 0x06	; 6
 212:	0e 94 d7 01 	call	0x3ae	; 0x3ae <INT_init>
 216:	08 95       	ret

00000218 <APP_Run>:
}


void APP_Run(void)
{
 218:	cf 93       	push	r28
	if (pedestrian_mode_flag==1) // system in Pedestrian Mode
 21a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 21e:	81 30       	cpi	r24, 0x01	; 1
 220:	19 f4       	brne	.+6      	; 0x228 <APP_Run+0x10>
	{
		Pedestrian_Mode();
 222:	0e 94 7c 00 	call	0xf8	; 0xf8 <Pedestrian_Mode>
 226:	bc c0       	rjmp	.+376    	; 0x3a0 <APP_Run+0x188>
		
	}
	else // system in Normal Mode
	{
		ON_Period=DELAY_TIME;
 228:	80 e4       	ldi	r24, 0x40	; 64
 22a:	9b e4       	ldi	r25, 0x4B	; 75
 22c:	ac e4       	ldi	r26, 0x4C	; 76
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <ON_Period>
 234:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <ON_Period+0x1>
 238:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <ON_Period+0x2>
 23c:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <ON_Period+0x3>
		if (state==Yellow_BEFORE_GREEN)
 240:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <state>
 244:	88 23       	and	r24, r24
 246:	89 f1       	breq	.+98     	; 0x2aa <APP_Run+0x92>
 248:	3b c0       	rjmp	.+118    	; 0x2c0 <APP_Run+0xa8>
		{
			for (u8 i=0;i<4;i++)
			{
				SETBit(CR_PORT,CR_YELLOW_PIN );
 24a:	88 b3       	in	r24, 0x18	; 24
 24c:	82 60       	ori	r24, 0x02	; 2
 24e:	88 bb       	out	0x18, r24	; 24
				timer_delay_us(ON_Period/8);
 250:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <ON_Period>
 254:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <ON_Period+0x1>
 258:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <ON_Period+0x2>
 25c:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <ON_Period+0x3>
 260:	bc 01       	movw	r22, r24
 262:	cd 01       	movw	r24, r26
 264:	68 94       	set
 266:	12 f8       	bld	r1, 2
 268:	96 95       	lsr	r25
 26a:	87 95       	ror	r24
 26c:	77 95       	ror	r23
 26e:	67 95       	ror	r22
 270:	16 94       	lsr	r1
 272:	d1 f7       	brne	.-12     	; 0x268 <APP_Run+0x50>
 274:	0e 94 7d 02 	call	0x4fa	; 0x4fa <timer_delay_us>
				CLRBit(CR_PORT,CR_YELLOW_PIN );
 278:	88 b3       	in	r24, 0x18	; 24
 27a:	8d 7f       	andi	r24, 0xFD	; 253
 27c:	88 bb       	out	0x18, r24	; 24
				timer_delay_us(ON_Period/8);
 27e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <ON_Period>
 282:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <ON_Period+0x1>
 286:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <ON_Period+0x2>
 28a:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <ON_Period+0x3>
 28e:	bc 01       	movw	r22, r24
 290:	cd 01       	movw	r24, r26
 292:	68 94       	set
 294:	12 f8       	bld	r1, 2
 296:	96 95       	lsr	r25
 298:	87 95       	ror	r24
 29a:	77 95       	ror	r23
 29c:	67 95       	ror	r22
 29e:	16 94       	lsr	r1
 2a0:	d1 f7       	brne	.-12     	; 0x296 <APP_Run+0x7e>
 2a2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <timer_delay_us>
	else // system in Normal Mode
	{
		ON_Period=DELAY_TIME;
		if (state==Yellow_BEFORE_GREEN)
		{
			for (u8 i=0;i<4;i++)
 2a6:	cf 5f       	subi	r28, 0xFF	; 255
 2a8:	01 c0       	rjmp	.+2      	; 0x2ac <APP_Run+0x94>
 2aa:	c0 e0       	ldi	r28, 0x00	; 0
 2ac:	c4 30       	cpi	r28, 0x04	; 4
 2ae:	68 f2       	brcs	.-102    	; 0x24a <APP_Run+0x32>
				timer_delay_us(ON_Period/8);
				CLRBit(CR_PORT,CR_YELLOW_PIN );
				timer_delay_us(ON_Period/8);
			}
			
			if (pedestrian_mode_flag==0)
 2b0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 2b4:	81 11       	cpse	r24, r1
 2b6:	74 c0       	rjmp	.+232    	; 0x3a0 <APP_Run+0x188>
			state=GREEN;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <state>
 2be:	70 c0       	rjmp	.+224    	; 0x3a0 <APP_Run+0x188>
		}
		else if (state==GREEN)
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	c1 f4       	brne	.+48     	; 0x2f4 <APP_Run+0xdc>
		{
			SETBit(CR_PORT,CR_GREEN_PIN );
 2c4:	88 b3       	in	r24, 0x18	; 24
 2c6:	84 60       	ori	r24, 0x04	; 4
 2c8:	88 bb       	out	0x18, r24	; 24
			timer_delay_us(ON_Period);
 2ca:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <ON_Period>
 2ce:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <ON_Period+0x1>
 2d2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ON_Period+0x2>
 2d6:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ON_Period+0x3>
 2da:	0e 94 7d 02 	call	0x4fa	; 0x4fa <timer_delay_us>
			CLRBit(CR_PORT,CR_GREEN_PIN );
 2de:	88 b3       	in	r24, 0x18	; 24
 2e0:	8b 7f       	andi	r24, 0xFB	; 251
 2e2:	88 bb       	out	0x18, r24	; 24
			
			if (pedestrian_mode_flag==0)
 2e4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 2e8:	81 11       	cpse	r24, r1
 2ea:	5a c0       	rjmp	.+180    	; 0x3a0 <APP_Run+0x188>
			state=Yellow_AFTER_GREEN;
 2ec:	82 e0       	ldi	r24, 0x02	; 2
 2ee:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <state>
 2f2:	56 c0       	rjmp	.+172    	; 0x3a0 <APP_Run+0x188>
		}
		else if (state==Yellow_AFTER_GREEN)
 2f4:	82 30       	cpi	r24, 0x02	; 2
 2f6:	e1 f5       	brne	.+120    	; 0x370 <APP_Run+0x158>
 2f8:	30 c0       	rjmp	.+96     	; 0x35a <APP_Run+0x142>
		{
			for (u8 i=0;i<4;i++)
			{
				SETBit(CR_PORT,CR_YELLOW_PIN );
 2fa:	88 b3       	in	r24, 0x18	; 24
 2fc:	82 60       	ori	r24, 0x02	; 2
 2fe:	88 bb       	out	0x18, r24	; 24
				timer_delay_us(ON_Period/8);
 300:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <ON_Period>
 304:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <ON_Period+0x1>
 308:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <ON_Period+0x2>
 30c:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <ON_Period+0x3>
 310:	bc 01       	movw	r22, r24
 312:	cd 01       	movw	r24, r26
 314:	68 94       	set
 316:	12 f8       	bld	r1, 2
 318:	96 95       	lsr	r25
 31a:	87 95       	ror	r24
 31c:	77 95       	ror	r23
 31e:	67 95       	ror	r22
 320:	16 94       	lsr	r1
 322:	d1 f7       	brne	.-12     	; 0x318 <APP_Run+0x100>
 324:	0e 94 7d 02 	call	0x4fa	; 0x4fa <timer_delay_us>
				CLRBit(CR_PORT,CR_YELLOW_PIN );
 328:	88 b3       	in	r24, 0x18	; 24
 32a:	8d 7f       	andi	r24, 0xFD	; 253
 32c:	88 bb       	out	0x18, r24	; 24
				timer_delay_us(ON_Period/8);
 32e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <ON_Period>
 332:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <ON_Period+0x1>
 336:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <ON_Period+0x2>
 33a:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <ON_Period+0x3>
 33e:	bc 01       	movw	r22, r24
 340:	cd 01       	movw	r24, r26
 342:	68 94       	set
 344:	12 f8       	bld	r1, 2
 346:	96 95       	lsr	r25
 348:	87 95       	ror	r24
 34a:	77 95       	ror	r23
 34c:	67 95       	ror	r22
 34e:	16 94       	lsr	r1
 350:	d1 f7       	brne	.-12     	; 0x346 <APP_Run+0x12e>
 352:	0e 94 7d 02 	call	0x4fa	; 0x4fa <timer_delay_us>
			if (pedestrian_mode_flag==0)
			state=Yellow_AFTER_GREEN;
		}
		else if (state==Yellow_AFTER_GREEN)
		{
			for (u8 i=0;i<4;i++)
 356:	cf 5f       	subi	r28, 0xFF	; 255
 358:	01 c0       	rjmp	.+2      	; 0x35c <APP_Run+0x144>
 35a:	c0 e0       	ldi	r28, 0x00	; 0
 35c:	c4 30       	cpi	r28, 0x04	; 4
 35e:	68 f2       	brcs	.-102    	; 0x2fa <APP_Run+0xe2>
				CLRBit(CR_PORT,CR_YELLOW_PIN );
				timer_delay_us(ON_Period/8);
			}
			
			
			if (pedestrian_mode_flag==0)
 360:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 364:	81 11       	cpse	r24, r1
 366:	1c c0       	rjmp	.+56     	; 0x3a0 <APP_Run+0x188>
			state=RED;
 368:	83 e0       	ldi	r24, 0x03	; 3
 36a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <state>
 36e:	18 c0       	rjmp	.+48     	; 0x3a0 <APP_Run+0x188>
		}
		else if (state==RED)
 370:	83 30       	cpi	r24, 0x03	; 3
 372:	b1 f4       	brne	.+44     	; 0x3a0 <APP_Run+0x188>
		{
			SETBit(CR_PORT,CR_RED_PIN );
 374:	88 b3       	in	r24, 0x18	; 24
 376:	81 60       	ori	r24, 0x01	; 1
 378:	88 bb       	out	0x18, r24	; 24
			timer_delay_us(ON_Period);
 37a:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <ON_Period>
 37e:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <ON_Period+0x1>
 382:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ON_Period+0x2>
 386:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ON_Period+0x3>
 38a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <timer_delay_us>
			CLRBit(CR_PORT,CR_RED_PIN );
 38e:	88 b3       	in	r24, 0x18	; 24
 390:	8e 7f       	andi	r24, 0xFE	; 254
 392:	88 bb       	out	0x18, r24	; 24
			
			if (pedestrian_mode_flag==0)
 394:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 398:	81 11       	cpse	r24, r1
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <APP_Run+0x188>
			state=Yellow_BEFORE_GREEN;
 39c:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <state>
		}
		
	}

}
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

000003a4 <main>:
#include "APPS.h"

int main(void)
{
	APP_Start();
 3a4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <APP_Start>
	

	while (1)
	{
		APP_Run();
 3a8:	0e 94 0c 01 	call	0x218	; 0x218 <APP_Run>
 3ac:	fd cf       	rjmp	.-6      	; 0x3a8 <main+0x4>

000003ae <INT_init>:
#include "EXT_INT.h"


void INT_init(u8 int_num , u8 sense_control)
{
	GICR|=(1<<int_num);
 3ae:	9b b7       	in	r25, 0x3b	; 59
 3b0:	21 e0       	ldi	r18, 0x01	; 1
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	08 2e       	mov	r0, r24
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <INT_init+0xe>
 3b8:	22 0f       	add	r18, r18
 3ba:	33 1f       	adc	r19, r19
 3bc:	0a 94       	dec	r0
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <INT_init+0xa>
 3c0:	29 2b       	or	r18, r25
 3c2:	2b bf       	out	0x3b, r18	; 59
	switch(int_num)
 3c4:	86 30       	cpi	r24, 0x06	; 6
 3c6:	a1 f0       	breq	.+40     	; 0x3f0 <INT_init+0x42>
 3c8:	87 30       	cpi	r24, 0x07	; 7
 3ca:	b1 f0       	breq	.+44     	; 0x3f8 <INT_init+0x4a>
 3cc:	85 30       	cpi	r24, 0x05	; 5
 3ce:	e1 f4       	brne	.+56     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
	{
		case INT_2:
		MCUCSR|=((sense_control & 0x01)<<6);
 3d0:	84 b7       	in	r24, 0x34	; 52
 3d2:	46 2f       	mov	r20, r22
 3d4:	41 70       	andi	r20, 0x01	; 1
 3d6:	50 e0       	ldi	r21, 0x00	; 0
 3d8:	00 24       	eor	r0, r0
 3da:	56 95       	lsr	r21
 3dc:	47 95       	ror	r20
 3de:	07 94       	ror	r0
 3e0:	56 95       	lsr	r21
 3e2:	47 95       	ror	r20
 3e4:	07 94       	ror	r0
 3e6:	54 2f       	mov	r21, r20
 3e8:	40 2d       	mov	r20, r0
 3ea:	48 2b       	or	r20, r24
 3ec:	44 bf       	out	0x34, r20	; 52
		break;
 3ee:	0c c0       	rjmp	.+24     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		
		case INT_0:
		MCUCR|=sense_control;
 3f0:	85 b7       	in	r24, 0x35	; 53
 3f2:	68 2b       	or	r22, r24
 3f4:	65 bf       	out	0x35, r22	; 53
		break;
 3f6:	08 c0       	rjmp	.+16     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		case INT_1:
		MCUCR|=(sense_control<<2);
 3f8:	85 b7       	in	r24, 0x35	; 53
 3fa:	70 e0       	ldi	r23, 0x00	; 0
 3fc:	66 0f       	add	r22, r22
 3fe:	77 1f       	adc	r23, r23
 400:	66 0f       	add	r22, r22
 402:	77 1f       	adc	r23, r23
 404:	68 2b       	or	r22, r24
 406:	65 bf       	out	0x35, r22	; 53
	}
	sei();
 408:	78 94       	sei
 40a:	08 95       	ret

0000040c <__vector_11>:

volatile static  u32 overflow=0;


ISR(TIMER0_OVF_vect)
{
 40c:	1f 92       	push	r1
 40e:	0f 92       	push	r0
 410:	0f b6       	in	r0, 0x3f	; 63
 412:	0f 92       	push	r0
 414:	11 24       	eor	r1, r1
 416:	8f 93       	push	r24
 418:	9f 93       	push	r25
 41a:	af 93       	push	r26
 41c:	bf 93       	push	r27
	overflow++;	
 41e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <overflow>
 422:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <overflow+0x1>
 426:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <overflow+0x2>
 42a:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <overflow+0x3>
 42e:	01 96       	adiw	r24, 0x01	; 1
 430:	a1 1d       	adc	r26, r1
 432:	b1 1d       	adc	r27, r1
 434:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <overflow>
 438:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <overflow+0x1>
 43c:	a0 93 68 00 	sts	0x0068, r26	; 0x800068 <overflow+0x2>
 440:	b0 93 69 00 	sts	0x0069, r27	; 0x800069 <overflow+0x3>
}
 444:	bf 91       	pop	r27
 446:	af 91       	pop	r26
 448:	9f 91       	pop	r25
 44a:	8f 91       	pop	r24
 44c:	0f 90       	pop	r0
 44e:	0f be       	out	0x3f, r0	; 63
 450:	0f 90       	pop	r0
 452:	1f 90       	pop	r1
 454:	18 95       	reti

00000456 <Force_Stop_Timer0>:



void Force_Stop_Timer0()
{
	overflow=~0;	
 456:	8f ef       	ldi	r24, 0xFF	; 255
 458:	9f ef       	ldi	r25, 0xFF	; 255
 45a:	dc 01       	movw	r26, r24
 45c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <overflow>
 460:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <overflow+0x1>
 464:	a0 93 68 00 	sts	0x0068, r26	; 0x800068 <overflow+0x2>
 468:	b0 93 69 00 	sts	0x0069, r27	; 0x800069 <overflow+0x3>
 46c:	08 95       	ret

0000046e <Timer0_Start>:



void Timer0_Start(void)
{
	CLRBit(TCCR0,CS00);
 46e:	83 b7       	in	r24, 0x33	; 51
 470:	8e 7f       	andi	r24, 0xFE	; 254
 472:	83 bf       	out	0x33, r24	; 51
	SETBit(TCCR0,CS01);
 474:	83 b7       	in	r24, 0x33	; 51
 476:	82 60       	ori	r24, 0x02	; 2
 478:	83 bf       	out	0x33, r24	; 51
	CLRBit(TCCR0,CS02);
 47a:	83 b7       	in	r24, 0x33	; 51
 47c:	8b 7f       	andi	r24, 0xFB	; 251
 47e:	83 bf       	out	0x33, r24	; 51
 480:	08 95       	ret

00000482 <Timer0_Stop>:
}
void Timer0_Stop(void)
{
	CLRBit(TCCR0,CS00);
 482:	83 b7       	in	r24, 0x33	; 51
 484:	8e 7f       	andi	r24, 0xFE	; 254
 486:	83 bf       	out	0x33, r24	; 51
	CLRBit(TCCR0,CS01);
 488:	83 b7       	in	r24, 0x33	; 51
 48a:	8d 7f       	andi	r24, 0xFD	; 253
 48c:	83 bf       	out	0x33, r24	; 51
	CLRBit(TCCR0,CS02);
 48e:	83 b7       	in	r24, 0x33	; 51
 490:	8b 7f       	andi	r24, 0xFB	; 251
 492:	83 bf       	out	0x33, r24	; 51
 494:	08 95       	ret

00000496 <Timer0_Init>:
{
	overflow=~0;	
}
void Timer0_Init(timer_modes Tmode)
{
	switch(Tmode)
 496:	88 23       	and	r24, r24
 498:	19 f0       	breq	.+6      	; 0x4a0 <Timer0_Init+0xa>
 49a:	83 30       	cpi	r24, 0x03	; 3
 49c:	71 f0       	breq	.+28     	; 0x4ba <Timer0_Init+0x24>
 49e:	08 95       	ret
	{
		case NORMAL:
		CLRBit(TCCR0,WGM01);
 4a0:	83 b7       	in	r24, 0x33	; 51
 4a2:	87 7f       	andi	r24, 0xF7	; 247
 4a4:	83 bf       	out	0x33, r24	; 51
		CLRBit(TCCR0,WGM00);
 4a6:	83 b7       	in	r24, 0x33	; 51
 4a8:	8f 7b       	andi	r24, 0xBF	; 191
 4aa:	83 bf       	out	0x33, r24	; 51
		
		Timer0_Stop();
 4ac:	0e 94 41 02 	call	0x482	; 0x482 <Timer0_Stop>
		
		SETBit(TIMSK,TOIE0);
 4b0:	89 b7       	in	r24, 0x39	; 57
 4b2:	81 60       	ori	r24, 0x01	; 1
 4b4:	89 bf       	out	0x39, r24	; 57
		sei();
 4b6:	78 94       	sei
		break;
 4b8:	08 95       	ret
		case CTC:
		
		break;	
		case FPWM:
		SETBit(TCCR0,WGM01);
 4ba:	83 b7       	in	r24, 0x33	; 51
 4bc:	88 60       	ori	r24, 0x08	; 8
 4be:	83 bf       	out	0x33, r24	; 51
		SETBit(TCCR0,WGM00);
 4c0:	83 b7       	in	r24, 0x33	; 51
 4c2:	80 64       	ori	r24, 0x40	; 64
 4c4:	83 bf       	out	0x33, r24	; 51
		
		SETBit(TCCR0,COM01);
 4c6:	83 b7       	in	r24, 0x33	; 51
 4c8:	80 62       	ori	r24, 0x20	; 32
 4ca:	83 bf       	out	0x33, r24	; 51
		CLRBit(TCCR0,COM00);
 4cc:	83 b7       	in	r24, 0x33	; 51
 4ce:	8f 7e       	andi	r24, 0xEF	; 239
 4d0:	83 bf       	out	0x33, r24	; 51
		
		SETBit(TCCR0,CS00);
 4d2:	83 b7       	in	r24, 0x33	; 51
 4d4:	81 60       	ori	r24, 0x01	; 1
 4d6:	83 bf       	out	0x33, r24	; 51
		CLRBit(TCCR0,CS01);
 4d8:	83 b7       	in	r24, 0x33	; 51
 4da:	8d 7f       	andi	r24, 0xFD	; 253
 4dc:	83 bf       	out	0x33, r24	; 51
		SETBit(TCCR0,CS02);
 4de:	83 b7       	in	r24, 0x33	; 51
 4e0:	84 60       	ori	r24, 0x04	; 4
 4e2:	83 bf       	out	0x33, r24	; 51
 4e4:	08 95       	ret

000004e6 <ResetTimer>:
	CLRBit(TCCR0,CS02);
}

void ResetTimer(void)
{
	TCNT0=0x00;
 4e6:	12 be       	out	0x32, r1	; 50
	overflow=0;
 4e8:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <overflow>
 4ec:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <overflow+0x1>
 4f0:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <overflow+0x2>
 4f4:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <overflow+0x3>
 4f8:	08 95       	ret

000004fa <timer_delay_us>:
}
void timer_delay_us(u32 delay)
{
 4fa:	cf 92       	push	r12
 4fc:	df 92       	push	r13
 4fe:	ef 92       	push	r14
 500:	ff 92       	push	r15
 502:	6b 01       	movw	r12, r22
 504:	7c 01       	movw	r14, r24
	ResetTimer();
 506:	0e 94 73 02 	call	0x4e6	; 0x4e6 <ResetTimer>
	Timer0_Start();
 50a:	0e 94 37 02 	call	0x46e	; 0x46e <Timer0_Start>
	while(delay > ((TCNT0+1+overflow*256UL)) ); //   256UL/2UL	
 50e:	82 b7       	in	r24, 0x32	; 50
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	01 96       	adiw	r24, 0x01	; 1
 514:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <overflow>
 518:	50 91 67 00 	lds	r21, 0x0067	; 0x800067 <overflow+0x1>
 51c:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <overflow+0x2>
 520:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <overflow+0x3>
 524:	76 2f       	mov	r23, r22
 526:	65 2f       	mov	r22, r21
 528:	54 2f       	mov	r21, r20
 52a:	44 27       	eor	r20, r20
 52c:	09 2e       	mov	r0, r25
 52e:	00 0c       	add	r0, r0
 530:	aa 0b       	sbc	r26, r26
 532:	bb 0b       	sbc	r27, r27
 534:	84 0f       	add	r24, r20
 536:	95 1f       	adc	r25, r21
 538:	a6 1f       	adc	r26, r22
 53a:	b7 1f       	adc	r27, r23
 53c:	8c 15       	cp	r24, r12
 53e:	9d 05       	cpc	r25, r13
 540:	ae 05       	cpc	r26, r14
 542:	bf 05       	cpc	r27, r15
 544:	20 f3       	brcs	.-56     	; 0x50e <timer_delay_us+0x14>
	Timer0_Stop();
 546:	0e 94 41 02 	call	0x482	; 0x482 <Timer0_Stop>
}
 54a:	ff 90       	pop	r15
 54c:	ef 90       	pop	r14
 54e:	df 90       	pop	r13
 550:	cf 90       	pop	r12
 552:	08 95       	ret

00000554 <_exit>:
 554:	f8 94       	cli

00000556 <__stop_program>:
 556:	ff cf       	rjmp	.-2      	; 0x556 <__stop_program>
